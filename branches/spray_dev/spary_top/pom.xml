<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<prerequisites>
		<maven>3.0</maven>
			<!-- As stated in http://docs.codehaus.org/display/MAVENUSER/Antrun+Plugin, 
				Maven ver 2.x has significant plugin classpath bug affects to maven-antrun-plugin. 
				Hence prevent being used with Maven ver 2.x. -->
	</prerequisites>
		
	<organization>
		<name>NewMain Softech</name>
		<url>http://newmainsoftech.com</url>
	</organization>
	
	<name>Spray</name>
	<description>Spray is multi-module project consisted of Spring utilities</description>
	<groupId>com.newmainsoftech</groupId>
	<artifactId>spray</artifactId>
	<version>1.1.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<inceptionYear>2011</inceptionYear>
	<url>https://code.google.com/p/spray</url>
	
	<licenses>
		<license>
			<name>Apache License version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	
	<developers>
		<developer>
			<email>artymt@gmail.com</email>
			<roles>
				<role>project administrator</role>
				<role>developer</role>
			</roles>
		</developer>
	</developers>

	<repositories>
		<repository>
			<id>sonatype-nexus-snapshots</id>
			<name>Sonatype Nexus Snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>  	
	<scm>
		<connection>scm:svn:http://spray.googlecode.com/svn/trunk/</connection>
		<developerConnection>scm:svn:https://spray.googlecode.com/svn/trunk/</developerConnection>
		<url>https://code.google.com/p/spray/source/checkout</url>
	</scm>
	<distributionManagement>
		<snapshotRepository>
			<id>sonatype-nexus-snapshots</id>
			<name>Sonatype Nexus Snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>sonatype-nexus-staging</id>
			<name>Nexus Release Repository</name>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>
		</repository>
		<site><!-- location where site is deployed -->
			<id>google.code.svn.repo</id>
			<name>Google Code Subversion Repository</name>
			<url>svn:https://spray.googlecode.com/svn/site</url>
		</site>
	</distributionManagement>
	
	<properties>
		<!-- For depedency version -->
			<spring_version>3.2.0.RELEASE</spring_version>
		
			<!-- Specify AppEngine version for your project. It should match SDK version 
				pointed to by ${gae.home} property (Typically, one used by your Eclipse plug-in) -->
				<gae_version>1.7.4</gae_version>
				<appengine-maven-plugin_version>1.7.4</appengine-maven-plugin_version>
			
			<slim3_version>1.0.16</slim3_version>
			<aspectj_version>1.7.1</aspectj_version>
			<slf4j_version>1.7.2</slf4j_version>
				<!-- version of artifacts from org.slf4j needs to be matched with 
					slf4j-api version what logback-classic depends on. -->				
			<junit_version>4.11</junit_version>
		
		<!-- For plugin version -->
			<maven-javadoc-plugin_version>2.8.1</maven-javadoc-plugin_version>
			<maven-scm-plugin_version>1.8.1</maven-scm-plugin_version>		
		
	    <maven_compiler_source>${java.specification.version}</maven_compiler_source>
	    <maven_compiler_target>${java.specification.version}</maven_compiler_target>
		
		<license.resource.directory>src${file.separator}main${file.separator}resources${file.separator}license</license.resource.directory>
	 	<site.source.diectory>src${file.separator}site</site.source.diectory>
		
		<!-- For maven-gpg-plugin -->
			<gpg_setting_id>gpg_setting_id</gpg_setting_id>
			<ant-util_version>1.0.1</ant-util_version>
		
		<!-- Sets the project's default encoding.
			http://docs.codehaus.org/display/MAVENUSER/POM+Element+for+Source+File+Encoding 
			Don't let your Mac use a crazy non-standard encoding. -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
			
		<!--  This is just for "eclipse:eclipse" goal to always attempt downloading sources -->
		<downloadSources>true</downloadSources>
	</properties>
	
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring_version}</version>
				<exclusions>
					<exclusion>
						<artifactId>commons-logging</artifactId>
						<groupId>commons-logging</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			
			<!-- These dependencies are here just for enabling logging -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j_version}</version>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>1.0.9</version>
				<scope>provided</scope>
			</dependency>
				<!-- version of artifacts from org.slf4j needs to be matched with 
					slf4j-api version what logback-classic depends on. -->
				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>jcl-over-slf4j</artifactId>
					<version>${slf4j_version}</version>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
					<version>${slf4j_version}</version>
					<scope>provided</scope>
				</dependency>
				
			<!-- Test scope -->
				<dependency>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
					<version>${junit_version}</version>
					<scope>test</scope>
				</dependency>
		</dependencies>
	</dependencyManagement>
	
	<dependencies>
		<!-- Compile scope -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
			</dependency>
		<!-- Provided scope -->
			<!-- These dependencies are here just for enabling logging -->
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
			</dependency>
				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>jcl-over-slf4j</artifactId>
				</dependency>
				<!-- dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</dependency -->
		<!-- Test scope -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
			</dependency>
	</dependencies>
	
  <build>
  	<resources>
  		<resource>
  			<directory>src${file.separator}main${file.separator}resources</directory>
  			<excludes>
  				<exclude>license</exclude>
  				<exclude>license/**</exclude>
  			</excludes>
  		</resource>
  	</resources>
  	
  	<pluginManagement>
	  	<plugins>	  	
	  		<plugin>
	  			<groupId>org.codehaus.mojo</groupId>
	  			<artifactId>license-maven-plugin</artifactId>
	  			<version>1.3</version>
				<executions>
					<execution>
						<id>download-apache-license</id>
						<phase>generate-resources</phase>
						<goals><goal>update-project-license</goal></goals>
						<configuration>
							<licenseName>apache_v2</licenseName>
								<!-- Download Apache license as LICENSE.txt -->
							<generateBundle>true</generateBundle>
								<!-- copy LICENSE.txt file to ${project.build.outputDirectory}/
									META-INF/${project.artifactId}-LICENSE.txt -->
						</configuration>
					</execution>
				</executions>
	  		</plugin>
	  		<plugin>
	  			<groupId>org.apache.maven.plugins</groupId>
	  			<artifactId>maven-compiler-plugin</artifactId>
	  			<version>3.0</version>
				<configuration>
					<source>${maven_compiler_source}</source>
					<target>${maven_compiler_target}</target>
	  			    <showDeprecation>true</showDeprecation>
	  			    <showWarnings>true</showWarnings>
				</configuration>
	  		</plugin>
	  		<plugin>
	  			<groupId>org.apache.maven.plugins</groupId>
	  			<artifactId>maven-surefire-plugin</artifactId>
	  			<version>2.11</version>
	  				<!-- 2.12 has bug on test property: 
	  						https://jira.codehaus.org/browse/SUREFIRE-827
	  						http://jira.codehaus.org/browse/SUREFIRE-760
	  				 -->
	  		</plugin>
	  		<plugin>
	  			<groupId>com.google.code.maven-license-plugin</groupId>
	  			<artifactId>maven-license-plugin</artifactId>
	  			<version>1.4.0</version>
	  			<configuration>
	  				<strictCheck>true</strictCheck>
		  			<excludes>
		  				<exclude>**${file.separator}*LICENSE.txt</exclude>
		  				<exclude>**${file.separator}*.log</exclude>
		  				<exclude>**${file.separator}svnIgnore.txt</exclude>
		  				<exclude>pom.xml.versionsBackup</exclude>
		  				<exclude>**${file.separator}logback-test.xml</exclude>
		  				<exclude>${license.resource.directory}${file.separator}**${file.separator}</exclude>
		  				<exclude>${site.source.diectory}${file.separator}**${file.separator}</exclude>
		  					<!-- Skip adding ASF2 license to site base files because adding downloaded 
		  						ASF2 license causes SiteToolException with maven-site-plugin due to 
		  						downloaded ASF2 license contains bom (byte order mark code for UTF-8: 
		  						U+EFBBBF) at top. -->
		  			</excludes>
	  				<header>${license.resource.directory}${file.separator}header.txt</header>
						<properties>
							<project.license.years>${project.license.years}</project.license.years>
							<project.organization.name>${project.organization.name}</project.organization.name>
						</properties>
	  				<headerDefinitions>
	  					<headerDefinition>${license.resource.directory}${file.separator}javaHeaderStyleDefinition.xml</headerDefinition>
	  				</headerDefinitions>
	  				<mapping>
	  					<java>FOR_JAVA_SOURCE</java>
	  				</mapping>
	  			</configuration>
	  			<executions>
	  				<execution>
	  					<id>append-code-license</id>
	  					<phase>prepare-package</phase>
	  					<goals><goal>format</goal></goals>
	  				</execution>
	  			</executions>
	  		</plugin>
	  		<plugin>
	  			<groupId>org.apache.maven.plugins</groupId>
	  			<artifactId>maven-javadoc-plugin</artifactId>
	  			<version>${maven-javadoc-plugin_version}</version>
	  			<executions>
	  				<execution>
	  					<goals>
	  						<goal>jar</goal>
	  					</goals>
						<configuration>
							<notimestamp>true</notimestamp>
						</configuration>
	  				</execution>
	  			</executions>
	  		</plugin>
	  		<plugin>
	  			<groupId>org.codehaus.mojo</groupId>
	  			<artifactId>buildnumber-maven-plugin</artifactId>
	  			<version>1.2</version>
	  			<executions>
	  				<execution>
	  					<phase>prepare-package</phase>
	  					<goals><goal>create</goal></goals>
	  				</execution>
	  			</executions>
	  			<configuration>
	  				<doCheck>false</doCheck>
	  					<!-- Decided to set false to doCheck parameter in order to avoid tediously 
	  						providing false as command line argument because maven-release-plugin 
	  						generates work files and for building development build for integration 
	  						test. Just need to be careful to sync with SCM when releasing snapshot 
	  						build. -->
	  				<doUpdate>true</doUpdate>
	  			</configuration>
	  		</plugin>
	  		<plugin>
	  			<groupId>org.apache.maven.plugins</groupId>
	  			<artifactId>maven-jar-plugin</artifactId>
	  			<version>2.4</version>
	  			<configuration>
		  			<excludes>
		  				<exclude>builddef.lst</exclude>
							<!-- exclude builddef.lst what is generated by aspectj-maven-plugin -->
						<exclude>LICENSE.txt</exclude>
						<exclude>license/**</exclude>
		  			</excludes>
					<archive>
						<manifest>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Specification-Title>${project.name} classes</Specification-Title>
							<Specification-Version>${project.version}</Specification-Version>
							<Specification-Vendor>${project.organization.name}</Specification-Vendor>
							<Implementation-Title>${project.groupId}.${project.artifactId}</Implementation-Title>
							<Implementation-Version>${project.version}</Implementation-Version>
							<Implementation-Vendor>${project.organization.name}</Implementation-Vendor>
							<Implementation-Build>r${buildNumber}</Implementation-Build>
						</manifestEntries>
					</archive>
	  			</configuration>
	  		</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>verify</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>builddef.lst</exclude>
									<!-- exclude builddef.lst what is generated by aspectj-maven-plugin -->
								<exclude>LICENSE.txt</exclude>
								<exclude>license/**</exclude>
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>	  		
	  		<plugin>
	  			<groupId>org.apache.maven.plugins</groupId>
	  			<artifactId>maven-antrun-plugin</artifactId>
	  			<version>1.7</version>
				<dependencies>
				    <!-- dependency>
						Not necessity of defining ant dependency since maven-antrun-plugin 
						itself has dependency to ant
				    	<groupId>org.apache.ant</groupId>
				    	<artifactId>ant</artifactId>
				    	<version>1.8.4</version>
				    </dependency -->
					<dependency>
						<groupId>ant-contrib</groupId>
						<artifactId>ant-contrib</artifactId>
						<version>1.0b3</version>
						<exclusions>
							<exclusion>
								<groupId>ant</groupId>
								<artifactId>ant</artifactId>
							</exclusion>
						</exclusions>
					</dependency>
					<dependency>
						<groupId>org.beanshell</groupId>
						<artifactId>bsh</artifactId>
						<version>2.0b5</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>set-auxiliary-Maven-properties</id>
						<phase>initialize</phase>
						<goals><goal>run</goal></goals>
						<inherited>true</inherited>
						<configuration>
							<target name="set-auxiliary-Maven-properties-target">
								<description>
								     <![CDATA[ Define various Maven properties with dynamic values ]]>
								</description>
								<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath"/>
								<script language="beanshell">
								     <![CDATA[
								    import org.apache.maven.project.MavenProject;
									import java.util.Calendar;
									import java.lang.String;
									import java.util.Properties;
								    
									self.log( 
											String.format(
												"START %1$s TASK of %2$s TARGET >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",
												new Object[]{ self.getTaskName(), self.getOwningTarget().getName()}
												)
											);
									
								    MavenProject mavenProject 
									= (MavenProject)(self.getProject().getReference( "maven.project"));
									Properties mavenProperties = mavenProject.getProperties();
									
								    // Define project.license.years Maven property to interprete 
								    // referece in header.txt for maven-license-plugin. ------------
									String propertyKey = "project.license.years";
									if ( mavenProperties.getProperty( propertyKey) == null) {
										String propertyValue = mavenProject.getInceptionYear();
											Calendar calendar = Calendar.getInstance();
											String thisYear 
											= String.valueOf( calendar.get( Calendar.YEAR));
											if ( mavenProject.getInceptionYear() == null) {
												propertyValue = thisYear;
											}
											else {
												if ( !thisYear.equals( propertyValue)) {
													propertyValue = propertyValue + "-" + thisYear;
												}
											}
										
										mavenProperties.setProperty( propertyKey, propertyValue);
											self.log(
												String.format(
													"Set %2$s value to %1$s Maven property.",
													new Object[]{ 
														propertyKey, 
														((propertyValue.length() < 1) ? "empty string (\"\")" : ("\"" + propertyValue + "\"")) }
													) 
												);
									}
								    // -------------------------------------------------------------
									
									self.log( 
											String.format(
												"END %1$s TASK of %2$s TARGET <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<",
												new Object[]{ self.getTaskName(), self.getOwningTarget().getName()}
												)
											);
								     ]]>
								</script>
							</target>
						</configuration>						
					</execution>
	  				<execution>
	  					<id>launch-beanshell-console</id>
	  					<phase>process-test-classes</phase>
	  					<goals><goal>run</goal></goals>
	  					<inherited>true</inherited>
	  					<configuration>
	  						<target name="launch-beanshell-console-target">
	  							<description>
									When value of open-bsh property is true, then launch beanshell <!--
									-->console for convenience of development and debugging in <!-- 
									-->process-test-classes phase (before test phase).
	  							</description>
								<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath"/>
								<if>
									<equals arg1="${open-bsh}" arg2="true"/>
									<then>
			  							<property name="plugin_classpath" refid="maven.plugin.classpath"/>
			  							<property name="test_classpath" refid="maven.test.classpath"/>
			  							<java classname="bsh.Console" dir="${project.build.directory}" fork="true" spawn="true">
			  								<classpath>
			  									<pathelement path="${java.class.path}"/>
			  									<!-- pathelement location="${org.beanshell:bsh:jar}" / -->
			  									<pathelement path="${plugin_classpath}"/>
			  									<pathelement path="${test_classpath}"/>
			  								</classpath>
			  							</java>
									</then>
								</if>
	  						</target>
	  					</configuration>
	  				</execution>
				</executions>
	  		</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-scm-plugin</artifactId>
			    <version>${maven-scm-plugin_version}</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<mavenExecutorId>forked-path</mavenExecutorId>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.2</version>
				<dependencies>
				    <dependency>
				    	<groupId>com.google.code.maven-svn-wagon</groupId>
				    	<artifactId>maven-svn-wagon</artifactId>
				    	<version>1.4</version>
				    </dependency>
				</dependencies>
			</plugin>
	  	</plugins>
  	</pluginManagement>
  	<plugins>
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-javadoc-plugin</artifactId>
  		</plugin>
  		<plugin>
  			<groupId>org.codehaus.mojo</groupId>
  			<artifactId>buildnumber-maven-plugin</artifactId>
		</plugin>
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-jar-plugin</artifactId>
  		</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-source-plugin</artifactId>
		</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-site-plugin</artifactId>
		</plugin>
		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-antrun-plugin</artifactId>
		</plugin>
  	</plugins>
  </build>
  
	<reporting>
		<plugins>
			<plugin>
	  			<groupId>org.apache.maven.plugins</groupId>
	  			<artifactId>maven-javadoc-plugin</artifactId>
	  			<version>${maven-javadoc-plugin-version}</version>
			</plugin>
			<!-- plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-changelog-plugin</artifactId>
				<version>2.2</version>
			</plugin -->
		</plugins>
	</reporting>
	
	<profiles>
		<profile>
			<id>release-profile-addition</id>
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
						    <groupId>org.apache.maven.plugins</groupId>
						    <artifactId>maven-scm-plugin</artifactId>
						    <version>${maven-scm-plugin-version}</version>
                            <executions>
                                <execution>
                                    <id>tag-source</id>
                                    <inherited>true</inherited>
                                    <phase>deploy</phase>
                                    <goals>
                                        <goal>tag</goal>
                                    </goals>
                                    <configuration>
                                    	<goalsDirectory>..</goalsDirectory>
                                    	<tag>${finalName}</tag>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-antrun-plugin</artifactId>
							<executions>
								<execution>
									<id>set_gpg_prop_execution</id>
									<phase>post-integration-test</phase>
									<goals><goal>run</goal></goals>
									<configuration>
										<exportAntProperties>true</exportAntProperties>
										<target name="set_gpg_prop_target">
											<description>
												To automatically feed gpg passpharse from Maven  
												settings file to maven-gpg-plugin's batch mode (without 
												user interaction via prompting to enter it).
											</description>
											<taskdef resource="com/newmainsoftech/ant/antlib.xml" 
												classpathref="maven.plugin.classpath" />
											<mvnservercreden 
												serverid="${gpg_setting_id}" 
												passwordpropname="gpg.passphrase" anttoo="true" />
										</target>
									</configuration>
								</execution>
							</executions>
							<dependencies>
								<dependency>
									<groupId>com.newmainsoftech</groupId>
									<artifactId>ant-util</artifactId>
									<version>${ant-util_version}</version>
								</dependency>
							</dependencies>
						</plugin>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-gpg-plugin</artifactId>
							<version>1.4</version>
							<executions>
								<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
								</execution>
							</executions>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
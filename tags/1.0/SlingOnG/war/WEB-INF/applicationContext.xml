<?xml version="1.0" encoding="UTF-8"?>
<!-- Auto-generated applicationContext.xml by PrepGaejSpringSupport.Ant.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation=
		"http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<!-- For Spring MVC -->
	<!-- To know what annotation-config does, refer to http://swik.net/Spring/Interface21+Team+Blog/Spring+2.5%27s+Comprehensive+Annotation+Support/b1z6v
	 -->								
	<context:annotation-config />
	<!-- Take out comment after adding your package as comma-separated list of packages to search for annotated controllers. Append '.*' to search all sub-packages
	<context:component-scan base-package="com.gajjsfgwt.server" /> 
	-->
	<!-- Enables controllers mapped with @RequestMapping annotations, formatting annotations @NumberFormat @DateTimeFormat, and JSR 303 style validation -->
	<!-- To know more what annotation-driven does, refer to http://stackoverflow.com/questions/3693397/howto-get-rid-of-mvcannotation-driven -->
	<mvc:annotation-driven />
									
	<!-- When needs to have session management, instead of using mvc:annotation-driven, setup AnnotationMethodHandlerAdapter  
		(which enables use of annotations on controller methods to map URLs to methods and request params to method arguments) and  
		DefaultAnnotationHandlerMapping -->
	<!-- 
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="order" value="1"></property>
	</bean>
	-->								
	<!-- Consider setting the AnnotationMethodHandlerAdapter's "synchronizeOnSession" flag to "true" if multiple requests are allowed to access a session concurrently. -->									
	<!-- 
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
	-->								
	
	<!-- Internationalized messages that can be displayed in a JSP page using the JSTL message format tag. 
	The basenames property of ResourceBundleMessageSource is set to 'messages' which will then look for 
	the default message resource of messages.properties. Based on different locales, other property files 
	can be defined like messages_es.properties for Spanish. 
	Referred at http://www.springbyexample.org/examples/basic-webapp-internationalization-spring-config.html 
	http://forum.springsource.org/showthread.php?t=11883&highlight=reloadableresourcebundlemessagesource
	http://www.jroller.com/raible/entry/spring_mvc_s_reloadableresourcebundlemessagesource
	 -->
	<bean id="baseMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="/WEB-INF/resource/messages" />
		<!-- In use of spring:message tag, show token key instead of throwing exception when token key is not found 
		Referrer at http://www.jroller.com/raible/entry/spring_mvc_s_reloadableresourcebundlemessagesource
		 -->
		<property name="useCodeAsDefaultMessage" value="true" />
	</bean>
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- After development, move properties files to be loaded by ResourceBundleMessageSource, since it's 
		twice quicker than ReloadableResourceBundleMessageSource.
		 -->
		<property name="parentMessageSource" ref="baseMessageSource" />
		<!-- properties files for ReloadableResourceBundleMessageSource need to be located 
		outside of class path, otherwise those will be cached and reload feature won't work because of that.
		 -->
		<property name="basenames" value="/WEB-INF/resource/dynamicMessages" />
		<property name="cacheSeconds" value="1" />
	</bean>
	
	<!-- The LocaleChangeInterceptor is configured to look for the parameter name 'locale' to indicate 
	a change of the user's locale, and is registered as an interceptor using the Spring MVC Namespace. 
	(The Spring MVC Namespace is new in Spring 3.0.) 
	For example, adding 'locale=es' to a URL would change the locale to Spanish.
	Referred at http://www.springbyexample.org/examples/basic-webapp-internationalization-spring-config.html
	 -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="locale" />
		</bean>
	</mvc:interceptors>
	
	<!-- The SessionLocaleResolver keeps the user's currently configured locale in session scope. 
	http://www.springbyexample.org/examples/basic-webapp-internationalization-spring-config.html
	 -->
	 <!-- 
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
	 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />
								
	<!-- For the cases that needs futher customization of view resolving, 
	may use a ResourceBundleViewResolver and a SimpleUrlHandlerMapping class. -->
	<bean id="viewResolver" 
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
	</bean>
	<!-- End for Spring MVC -->
								
</beans>
								